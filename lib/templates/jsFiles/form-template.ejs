import React, { useState, useEffect } from 'react'
import { array, object, func } from 'prop-types'
import immutable from 'immutable'
import joi from 'joi-browser'

const validationStates = {
  CORRECT: 'correct',
  WRONG: 'wrong',
  EMPTY: 'empty'
}

const Form = (props) => {
  const [data, setData] = useState(immutable.fromJS(props.initial || {}))
  const [validations, setValidations] = useState({})
  const [isValid, setIsValid] = useState(false)

  const setInitialValidations = () => {
    let tempValidations = {}
    data.keySeq(field => tempValidations[field] = { state: validationStates.EMPTY, error: null })
    setValidations(tempValidations)
  }

  const joiValidate = () => {
    return new Promise((resolve, reject) => {
      let tempValidations = {}
      data.keySeq(field => tempValidations[field] = { state: validationStates.CORRECT, error: null })
      joi.validate(data.toJS(), props.joiValidationSchema, { abortEarly: false }, (err, data) => {
        if (err) {
          err.details.map((item) => {
            const { object, field } = getChild(data, item.path)
            if (typeof object[field] === 'undefined') {
              return reject(`Error: field not found. ${field}`)
            }
            if (object[field].toString().length === 0) {
              tempValidations[item.path] = {
                state: validationStates.EMPTY,
                error: null
              }
            } else {
              tempValidations[item.path] = {
                state: validationStates.WRONG,
                error: item.message
              }
            }
          })
        }
        return resolve({
          tempIsValid: !err,
          tempValidations
        })
      })
    })
  }

  const getChild = (object, path) => {
    let item
    if (path.length > 1) {
      item = object[path[0]]
      for (var i = 1; i < path.length - 1; i++) {
        item = item[path[i]]
      }
      return {
        object: item,
        field: path.pop()
      }
    } else {
      return {
        object: object,
        field: path[0]
      }
    }
  }

  const onChange = (...args) => {
    let newData = {}

    if (args.length === 1) {
      const [event] = args
      const { name, type, checked, value } = event.target
      newData = {
        [name]: type === 'checkbox' ? checked : value
      }
    }

    if (args.length === 2) {
      const [name, value] = args
      newData = {
        [name]: value
      }
    }

    setData(data.merge(immutable.fromJS(newData)))
  }

  useEffect(() => {
    if (props.joiValidationSchema) {
      setInitialValidations()
      joiValidate()
        .then(({ tempIsValid, tempValidations }) => {
          setIsValid(tempIsValid)
          setValidations(tempValidations)
        })
        .catch(ex => {
          throw ex
        })
    }
  }, [data])

  const reset = () => {
    setData(immutable.fromJS(props.initial || {}))
  }

  const onSubmit = (ev) => {
    props.onSubmit(data.toJS(), ev)
  }

  return (
    <div>
      <form onSubmit={onSubmit}>
        {props.children(data.toJS(), onChange, reset, isValid, validations)}
      </form>
    </div>
  )
}

Form.propTypes = {
  children: func,
  initial: object,
  joiValidationSchema: object,
  onSubmit: func
}

export default Form
